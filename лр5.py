# -*- coding: utf-8 -*-
"""mlr5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CvkMRTQPaR19wItkJjvGMBZEntU2DZBn
"""

import pandas as pd
import io
import numpy as np
import warnings

"""## Преобразование файла orders.csv

Загрузка файла
"""

from google.colab import files
uploaded = files.upload()
dataset = pd.read_csv(io.BytesIO(uploaded['orders.csv']), delimiter = ",")
df_ord = pd.DataFrame(dataset)

"""Выведем 5 первых строчек файла"""

df_ord.head(5)

"""Дан файл, содержащий сведения о заказах. Описание колонок:

• transactionId — идентификатор заказа;
<p>
• visitorId — идентификатор пользователя, совершившего заказ;
<p>
• date — дата, когда был совершён заказ;
<p>
• revenue — выручка заказа;
<p>
• group — группа A/B-теста, в которую попал заказ.

Посмотрим названия столбцов, типы данных и пропуски
"""

df_ord.info()

"""Названия столбцов некорректны, т.к. присутствуют заглавные буквы. Пропуски отсутствуют, типы данных правильные у всех, кроме столбца date.

Переименуем столбцы
"""

for Name, values in df_ord.iteritems():
  df_ord.rename(columns={Name:Name.lower()},inplace=True)

"""Преобразуем столбец date к типу данных datetime"""

df_ord['date'] = pd.to_datetime(df_ord['date'], format='%Y-%m-%d' )
print(df_ord['date'].head(10))

"""Проверим уникальные значения столбцов."""

print(df_ord['group'].unique())

"""Значения столбца group уникальны"""

for name, values in df_ord.iteritems():
  print(name)
  val = df_ord[name].describe()
  print(val)
  print('\n')

"""Данные корректны.

Проверим данные на наличие явных дубликатов.
"""

print(df_ord.duplicated().sum())

"""Дубликаты отсутствуют

## Преобразование файла visitors.csv

Загрузка файла
"""

from google.colab import files
uploaded = files.upload()
dataset = pd.read_csv(io.BytesIO(uploaded['visitors.csv']), delimiter = ",")
df_vis = pd.DataFrame(dataset)

"""Выведем 5 первых строчек файла"""

df_vis.head(5)

"""Дан файл, содержащий сведения о пользователях. Описание колонок:

• date — дата;
<p>
• group — группа A/B-теста;
<p>
• visitors — количество пользователей в указанную дату в указанной 
группе A/B-теста

Посмотрим названия столбцов, типы данных и пропуски
"""

df_vis.info()

"""Названия столбцов корректны, в данных пропусков нет, типы данных правильные у всех, кроме столбца date.

Преобразуем столбец date к типу данных datetime
"""

df_vis['date'] = pd.to_datetime(df_vis['date'], format='%Y-%m-%d')
print(df_vis['date'].head(10))

"""Проверим уникальные значения столбцов."""

print(df_vis['group'].unique())

"""Значения столбца group уникальны"""

df_vis['visitors'].describe()

"""Столбец visitors имеет корректные значения

Проверим данные на наличие явных дубликатов.
"""

print(df_vis.duplicated().sum())

"""Дубликаты отсутствуют

## Первая часть

Избавимся от пересекающихся пользователей, т.е. входящих в разные группы одновременно
"""

nomer_str = []
for i, row in df_ord.iterrows():
  vis = df_ord['visitorid'].values[i]
  group = df_ord['group'].values[i]
  for j, row in df_ord.iterrows():
    if j!=i and df_ord['visitorid'].values[j] == vis and df_ord['group'].values[j] == group:
      nomer_str.append(i)
      nomer_str.append(j)

df_ord.drop(index = nomer_str)

"""Создадим массив уникальных пар значений дат и групп теста"""

datesGroups = df_ord[['date','group']].drop_duplicates()
display(datesGroups)

"""Как видно из таблицы выше, на каждый день приходится по 1 тесту из каждой группы

Получим агрегированные кумулятивные данные по дням о 
заказах
"""

ordersAggregated = datesGroups.apply(lambda x: df_ord[np.logical_and
                                       (df_ord['date'] <= x['date'], 
                                        df_ord['group'] == x['group'])].agg
                      ({'date' : 'max', 'group' : 'max',
                        'transactionid' : 'nunique', 'visitorid' : 'nunique', 
                        'revenue' : 'sum'}), axis=1).sort_values(by=['date','group'])
ordersAggregated.head()

"""Эта таблица показывает, id заказа, id пользователя и сумму выручки с самого первого дня до данной даты.

Получим агрегированные кумулятивные данные по дням о 
посетителях
"""

visitorsAggregated = datesGroups.apply(lambda x: 
df_vis[np.logical_and(df_vis['date'] <= x['date'], 
df_vis['group'] == x['group'])].agg({'date' : 'max', 
'group' : 'max', 'visitors' : 'sum'}), 
axis=1).sort_values(by=['date','group'])
visitorsAggregated.head()

"""Эта таблица показывает, какое количество пользователей сделало заказ, в зависимости от группы.

Объединим данные в одной таблице
"""

cumulativeData = ordersAggregated.merge(visitorsAggregated, left_on=['date', 'group'], right_on=['date', 'group'])
cumulativeData.columns = ['date', 'group', 'orders', 'buyers', 'revenue', 'visitors']
cumulativeData.head()

"""Разделим cumulativeData на 2 группы по группам А и B

Отделяем данные по группе A
"""

cumulativeData_A = cumulativeData[cumulativeData['group']=='A']
cumulativeData_A.tail(5)
#display(cumulativeData_A)

"""Отделяем данные по группе B"""

cumulativeData_B = cumulativeData[cumulativeData['group']=='B']
cumulativeData_B.tail(5)

"""Из представленных выше таблиц видно, что в группе B заказов, покупателей, пользователей и выручки с заказов больше, чем в группе А.

С помощью groupby получим таблицу ordersByUsers
"""

# Количество раз, сколько пользователь встречался в столбце
ordersByUsers  = df_ord.groupby('visitorid')['visitorid'].count()
ordersByUsers = pd.DataFrame(ordersByUsers)
ordersByUsers = ordersByUsers.rename(columns={'visitorid': 'orders'})
# Сортировка по количеству заказов пользователя 
ordersByUsers.sort_values(by='orders', inplace=True)
ordersByUsers.head()

#display(ordersByUsers)

"""По оси x отложим числа от 0 до количества строк в данных"""

X = pd.Series(range(0,len(ordersByUsers)))

"""Построим график"""

import matplotlib.pyplot as plt
plt.scatter(X, ordersByUsers['orders'])
plt.ylabel('Число заказов')
plt.xlabel('Пользователи')

"""Из графика видно, что больше всего пользователи совершили по одному заказу, а максимальное количество заказов от одного пользователя равно 11.

## Вывод

В ходе выполнения работы были получены навыки использования A/B тестирования. Была создана таблица по агрегировано кумулятивным данным по дням, с помощью которой можно отслеживать, увеличение количества пользователей, посещений сайта, заказов и прибыли от заказов в каждой тестируемой группе. Была составлена таблица количества заказов по пользователям и составлен график. Из которого следует, что пользователи обычно совершают один заказ на сайте.
"""